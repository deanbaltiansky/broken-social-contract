[{"name":"app.R","content":"# study-1/app/app.R\nlibrary(shiny)\n\n# 1) Data source\nDATA_URL <- \"https://raw.githubusercontent.com/deanbaltiansky/broken-social-contract/main/study-1/data/df_bsc_elg.csv\"\n\n# Optional: restrict to your hand-picked continuous vars (leave empty to auto-detect)\nnumeric_vars_user <- c(\n  \"brokencontract_openai\",\"antiest\",\"trust_deminst\",\"trust_natinst\",\"trust_science\",\"vote_likely\",\"change\",\n  \"SDO\",\"TIPI_extra\",\"TIPI_agree\",\"TIPI_consc\",\"TIPI_neuro\",\"TIPI_open\",\n  \"ideo_con\",\"ideo_lib\",\"ideo_demsoc\",\"ideo_lbrtn\",\"ideo_prog\",\n  \"republican\",\"democrat\",\"independent\",\"vote_2024_trump\",\"vote_2024_biden\",\"vote_2024_rfkj\",\"vote_2024_other\",\n  \"man\",\"white\",\"age\",\"income_num\",\"edu_num\",\"county_gini\",\"county_density\",\"county_medianincome\"\n)\n\nload_data <- function() {\n  local_path <- \"data/df_lebe.csv\"           # only within the app/ folder\n  if (file.exists(local_path)) {\n    read.csv(local_path, check.names = FALSE)\n  } else {\n    read.csv(DATA_URL, check.names = FALSE)\n  }\n}\n\nui <- fluidPage(\n  titlePanel(\"Broken Social Contract: Study 1 Correlations\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Pick two continuous variables to explore their linear relationship.\"),\n      selectInput(\"xvar\", \"X axis\", choices = NULL),\n      selectInput(\"yvar\", \"Y axis\", choices = NULL)\n    ),\n    mainPanel(\n      plotOutput(\"scatter\", height = 420),\n      tags$hr(),\n      verbatimTextOutput(\"stats\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  df <- load_data()\n  \n  # Build choices: use your list if provided, else auto-detect numeric columns\n  numeric_auto <- names(df)[vapply(df, is.numeric, logical(1))]\n  numeric_choices <- if (length(numeric_vars_user)) {\n    intersect(numeric_vars_user, names(df))\n  } else numeric_auto\n  \n  # Populate dropdowns\n  updateSelectInput(session, \"xvar\", choices = numeric_choices,\n                    selected = if (length(numeric_choices)) numeric_choices[1])\n  updateSelectInput(session, \"yvar\", choices = numeric_choices,\n                    selected = if (length(numeric_choices) > 1) numeric_choices[2])\n  \n  pair_data <- reactive({\n    req(input$xvar, input$yvar)\n    d <- df[, c(input$xvar, input$yvar)]\n    stats::na.omit(d)\n  })\n  \n  output$scatter <- renderPlot({\n    d <- pair_data()\n    validate(\n      need(nrow(d) >= 3, \"Not enough non-missing pairs to plot.\"),\n      need(stats::sd(d[[1]]) > 0, \"X has no variance.\"),\n      need(stats::sd(d[[2]]) > 0, \"Y has no variance.\")\n    )\n    plot(d[[1]], d[[2]], pch = 19, xlab = input$xvar, ylab = input$yvar)\n    fit <- lm(d[[2]] ~ d[[1]])\n    abline(fit, lwd = 2)\n  })\n  \n  output$stats <- renderText({\n    d <- pair_data()\n    if (nrow(d) < 3 || any(c(stats::sd(d[[1]]), stats::sd(d[[2]])) == 0)) {\n      return(\"Insufficient variance or data.\")\n    }\n    ct <- cor.test(d[[1]], d[[2]], method = \"pearson\")\n    sprintf(\"Pearson r = %.3f   (p = %.3g,  n = %d)\",\n            unname(ct$estimate), ct$p.value, nrow(d))\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
